<?xml version="1.0"?>
<robot name="mbot" xmlns:xacro="http://www.ros.org/wiki/xacro">

  <!-- PROPERTY LIST -->
  <xacro:property name="M_PI" value="3.14159" />

  <xacro:property name="motor_mass" value="1" />
  <xacro:property name="motor_radius" value="0.02" />
  <xacro:property name="motor_length" value="0.08" />
  <xacro:property name="motor_x" value="-0.055" />
  <xacro:property name="motor_y" value="0.075" />

  <xacro:property name="wheel_mass" value="2" />
  <xacro:property name="wheel_radius" value="0.033" />
  <xacro:property name="wheel_length" value="0.017" />
  <xacro:property name="wheel_y" value="${(motor_length+wheel_length)/2}" />

  <xacro:property name="plate_mass" value="2" />
  <xacro:property name="plate_radius" value="0.13" />
  <xacro:property name="plate_length" value="0.005" />
  <xacro:property name="plate_height" value="0.07" />

  <xacro:property name="standoff_x" value="0.12" />
  <xacro:property name="standoff_y" value="0.10" />

  <xacro:property name="caster_mass" value="0.5" />
  <xacro:property name="caster_radius" value="${wheel_radius/2}" />


  <!-- Defining the colors used in this robot -->
  <material name="yellow">
      <color rgba="1 0.4 0 1"/>
  </material>
  <material name="black">
      <color rgba="0 0 0 0.95"/>
  </material>
  <material name="gray">
      <color rgba="0.75 0.75 0.75 1"/>
  </material>
  <material name="white">
      <color rgba="1 1 1 0.9" />
  </material>

  <!-- Macro for inertia matrix -->
  <xacro:macro name="sphere_inertial_matrix" params="m r">
      <inertial>
          <mass value="${m}" />
          <inertia ixx="${2*m*r*r/5}" ixy="0" ixz="0"
              iyy="${2*m*r*r/5}" iyz="0"
              izz="${2*m*r*r/5}" />
      </inertial>
  </xacro:macro>
  <xacro:macro name="cylinder_inertial_matrix" params="m r h">
      <inertial>
          <mass value="${m}" />
          <inertia ixx="${m*(3*r*r+h*h)/12}" ixy = "0" ixz = "0"
              iyy="${m*(3*r*r+h*h)/12}" iyz = "0"
              izz="${m*r*r/2}" />
      </inertial>
  </xacro:macro>
  <xacro:macro name="box_inertial_matrix">
      <inertial>
          <mass value="0.001" />
          <origin xyz="0 0 0" />
          <inertia ixx="0.0001" ixy="0.0" ixz="0.0"
                   iyy="0.0001" iyz="0.0"
                   izz="0.0001" />
      </inertial>
  </xacro:macro>

  <!-- Macro for robot plate -->
  <xacro:macro name="plate" params="parent number x y z">
      <joint name="plate_${number}_joint" type="fixed">
          <origin xyz="${x} ${y} ${z}" rpy="0 0 0" />
          <parent link="${parent}" />
          <child link="plate_${number}_link" />
      </joint>

      <link name="plate_${number}_link">
          <visual>
              <origin xyz="0 0 0" rpy="0 0 0" />
              <geometry>
                  <cylinder radius="${plate_radius}" length="${plate_length}" />
              </geometry>
              <material name="yellow" />
          </visual>

          <collision>
              <origin xyz="0 0 0" rpy="0 0 0" />
              <geometry>
                  <cylinder radius="${plate_radius}" length="${plate_length}" />
              </geometry>
          </collision>
          <cylinder_inertial_matrix m="5" r="${plate_radius}" h="${plate_length}" />
      </link>

      <gazebo reference="plate_${number}_link">
            <material>Gazebo/Yellow</material>
      </gazebo>
  </xacro:macro>

  <!-- Macro for robot standoff -->
  <xacro:macro name="standoff" params="parent number x y z">
      <joint name="standoff_${number}_joint" type="fixed">
          <origin xyz="${x} ${y} ${z}" rpy="0 0 0" />
          <parent link="${parent}"/>
          <child link="standoff_${number}_link" />
      </joint>

      <link name="standoff_${number}_link">
          <visual>
              <origin xyz=" 0 0 0 " rpy="0 0 0" />
              <geometry>
                  <box size="0.01 0.01 0.07" />
              </geometry>
              <material name="black" />
          </visual>

          <collision>
              <origin xyz="0.0 0.0 0.0" rpy="0 0 0" />
              <geometry>
                  <box size="0.01 0.01 0.07" />
              </geometry>
          </collision>
          <box_inertial_matrix />
      </link>

      <gazebo reference="standoff_${number}_link">
          <material>Gazebo/Black</material>
      </gazebo>
  </xacro:macro>

  <!-- Macro for robot motor -->
  <xacro:macro name="motor" params="prefix reflect">
    <joint name="${prefix}_motor_joint" type="fixed">
        <origin xyz="${motor_x} ${reflect*motor_y} 0" rpy="0 0 0"/>
        <parent link="base_link"/>
        <child link="${prefix}_motor_link"/>
        <axis xyz="0 1 0"/>
    </joint>

    <link name="${prefix}_motor_link">
        <visual>
            <origin xyz="0 0 0" rpy="${M_PI/2} 0 0" />
            <geometry>
                <cylinder radius="${motor_radius}" length = "${motor_length}"/>
            </geometry>
            <material name="gray" />
        </visual>
        <collision>
            <origin xyz="0 0 0" rpy="${M_PI/2} 0 0" />
            <geometry>
                <cylinder radius="${motor_radius}" length = "${motor_length}"/>
            </geometry>
        </collision>
        <cylinder_inertial_matrix  m="${motor_mass}" r="${motor_radius}" h="${motor_length}" />
    </link>

    <gazebo reference="${prefix}_motor_link">
        <material>Gazebo/White</material>
    </gazebo>
  </xacro:macro>

  <!-- Macro for robot wheel -->
  <xacro:macro name="wheel" params="prefix reflect">
      <joint name="${prefix}_wheel_joint" type="continuous">
          <origin xyz="0 ${reflect*wheel_y} 0" rpy="0 0 0"/>
          <parent link="${prefix}_motor_link"/>
          <child link="${prefix}_wheel_link"/>
          <axis xyz="0 1 0"/>
      </joint>

      <link name="${prefix}_wheel_link">
          <visual>
              <origin xyz="0 0 0" rpy="${M_PI/2} 0 0" />
              <geometry>
                  <cylinder radius="${wheel_radius}" length = "${wheel_length}"/>
              </geometry>
              <material name="white" />
          </visual>
          <collision>
              <origin xyz="0 0 0" rpy="${M_PI/2} 0 0" />
              <geometry>
                  <cylinder radius="${wheel_radius}" length = "${wheel_length}"/>
              </geometry>
          </collision>
          <cylinder_inertial_matrix  m="${wheel_mass}" r="${wheel_radius}" h="${wheel_length}" />
      </link>

      <gazebo reference="${prefix}_wheel_link">
          <material>Gazebo/White</material>
      </gazebo>

      <!-- Transmission is important to link the joints and the controller -->
      <transmission name="${prefix}_wheel_joint_trans">
          <type>transmission_interface/SimpleTransmission</type>
          <joint name="${prefix}_wheel_joint" >
              <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
          </joint>
          <actuator name="${prefix}_wheel_joint_motor">
              <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
              <mechanicalReduction>1</mechanicalReduction>
          </actuator>
      </transmission>
  </xacro:macro>

  <xacro:macro name="robot_body">
      <!-- base_footprint -->
      <link name="base_footprint">
          <visual>
              <origin xyz="0 0 0" rpy="0 0 0" />
              <geometry>
                  <box size="0.001 0.001 0.001" />
              </geometry>
          </visual>
      </link>
      <gazebo reference="base_footprint">
          <turnGravityOff>false</turnGravityOff>
      </gazebo>

      <!-- base_link -->
      <joint name="base_footprint_joint" type="fixed">
        <origin xyz="0 0 ${wheel_radius}" rpy="0 0 0"/>
        <parent link="base_footprint"/>
        <child link="base_link"/>
      </joint>

      <link name="base_link">
        <visual>
            <origin xyz="0 0 0" rpy="0 0 0" />
            <geometry>
                <cylinder radius="${plate_radius}" length="${plate_length}" />
            </geometry>
            <material name="yellow" />
        </visual>
        <collision>
            <origin xyz="0 0 0" rpy="0 0 0" />
            <geometry>
                <cylinder radius="${plate_radius}" length = "${plate_length}"/>
            </geometry>
        </collision>
        <cylinder_inertial_matrix  m="${plate_mass}" r="${plate_radius}" h="${plate_length}" />
    </link>
    <gazebo reference="base_link">
        <material>Gazebo/Yellow</material>
    </gazebo>

      <!-- plate -->
      <plate parent="base_link" number="1" x="0" y="0" z="${plate_height}" />
      <plate parent="plate_1_link" number="2" x="0" y="0" z="${plate_height}" />

      <!-- motor -->
      <motor prefix="left" reflect="1" />
      <motor prefix="right" reflect="-1" />

      <!-- wheel -->
      <wheel prefix="left" reflect="1" />
      <wheel prefix="right" reflect="-1" />

      <!-- standoff -->
      <standoff parent="base_link" number="1" x="-${standoff_x/2 + 0.03}" y="-${standoff_y - 0.03}" z="${plate_height/2}" />
      <standoff parent="base_link" number="2" x="-${standoff_x/2 + 0.03}" y="${standoff_y - 0.03}" z="${plate_height/2}" />
      <standoff parent="base_link" number="3" x="${standoff_x/2}" y="-${standoff_y}" z="${plate_height/2}" />
      <standoff parent="base_link" number="4" x="${standoff_x/2}" y="${standoff_y}" z="${plate_height/2}" />

      <standoff parent="plate_1_link" number="5" x="-${standoff_x/2 + 0.03}" y="-${standoff_y - 0.03}" z="${plate_height/2}" />
      <standoff parent="plate_1_link" number="6" x="-${standoff_x/2 + 0.03}" y="${standoff_y - 0.03}" z="${plate_height/2}" />
      <standoff parent="plate_1_link" number="7" x="${standoff_x/2}" y="-${standoff_y}" z="${plate_height/2}" />
      <standoff parent="plate_1_link" number="8" x="${standoff_x/2}" y="${standoff_y}" z="${plate_height/2}" />

      <!-- front_caster -->
      <joint name="front_caster_joint" type="continuous">
          <origin xyz="${plate_radius-wheel_radius/2} 0 -${wheel_radius/2}" rpy="0 0 0"/>
          <parent link="base_link"/>
          <child link="front_caster_link"/>
          <axis xyz="0 1 0"/>
      </joint>

      <link name="front_caster_link">
          <visual>
              <origin xyz="0 0 0" rpy="${M_PI/2} 0 0"/>
              <geometry>
                  <sphere radius="${caster_radius}" />
              </geometry>
              <material name="black" />
          </visual>

          <collision>
              <origin xyz="0 0 0" rpy="0 0 0" />
              <geometry>
                  <sphere radius="${caster_radius}" />
              </geometry>
          </collision>
          <sphere_inertial_matrix  m="${caster_mass}" r="${caster_radius}" />
      </link>
      <gazebo reference="front_caster_link">
          <material>Gazebo/Black</material>
      </gazebo>

      <!-- controller -->
      <gazebo>
          <plugin name="differential_drive_controller" filename="libgazebo_ros_diff_drive.so">
              <rosDebugLevel>Debug</rosDebugLevel>
              <publishWheelTF>true</publishWheelTF>
              <robotNamespace>/</robotNamespace>
              <publishTf>1</publishTf>
              <publishWheelJointState>true</publishWheelJointState>
              <alwaysOn>true</alwaysOn>
              <updateRate>100.0</updateRate>
              <legacyMode>true</legacyMode>
              <leftJoint>left_wheel_joint</leftJoint>
              <rightJoint>right_wheel_joint</rightJoint>
              <wheelSeparation>${plate_radius*2}</wheelSeparation>
              <wheelDiameter>${2*wheel_radius}</wheelDiameter>
              <broadcastTF>1</broadcastTF>
              <wheelTorque>30</wheelTorque>
              <wheelAcceleration>1.8</wheelAcceleration>
              <commandTopic>cmd_vel</commandTopic>
              <odometryFrame>odom</odometryFrame>
              <odometryTopic>odom</odometryTopic>
              <robotBaseFrame>base_footprint</robotBaseFrame>
          </plugin>
      </gazebo>

  </xacro:macro>

</robot>
